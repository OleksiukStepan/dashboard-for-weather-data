services:
  weather_service:
    build:
      context: .
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy

  celery_worker:
    build:
      context: .
    volumes:
      - ./:/app
    command: >
      sh -c "cd /app && celery -A core worker --loglevel=info"
    depends_on:
      - redis
      - db

  redis:
    image: redis:latest
    restart: always
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]

  celery_beat:
    build:
      context: .
    volumes:
      - ./:/app
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py wait_for_migrations &&
             python manage.py create_interval_schedule &&
             cd /app && celery -A core beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      - redis
      - weather_service
      - db

  db:
    image: postgres:16.0-alpine3.17
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - weather_db_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 10s
      retries: 5

volumes:
  weather_db_data:
